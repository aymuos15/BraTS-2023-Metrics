"""
BraTS-MET Table Generator

This script loads summary CSV files generated by the analysis.py script
and regenerates formatted tables for display or export.
"""

import argparse
from pathlib import Path
from typing import Dict, Optional

import pandas as pd


def load_summary_csv(file_path: Path) -> pd.DataFrame:
    """
    Load a summary CSV file.
    
    Args:
        file_path: Path to the CSV file
        
    Returns:
        DataFrame containing the summary data
    """
    if not file_path.exists():
        raise FileNotFoundError(f"CSV file not found: {file_path}")
    
    return pd.read_csv(file_path)


def format_display_table(df: pd.DataFrame) -> pd.DataFrame:
    """
    Create formatted display table from raw summary data.
    
    Args:
        df: DataFrame with raw summary data
        
    Returns:
        Formatted display DataFrame
    """
    # Team name mappings
    name_mapping = {
        'i_sahajmistry': 'isahajmistry',
        'MIA_SINTEF': 'MIASINTEF',
        'S_Y': 'SY',
        'CNMC_PMI2023': 'CNMCPMI2023'
    }
    
    display_df = pd.DataFrame()
    display_df['Team Name'] = df['Team Name'].map(name_mapping).fillna(df['Team Name'])
    
    # Format metrics columns
    for metric in ['ET', 'TC', 'WT']:
        display_df[f'{metric} Dice score'] = df.apply(
            lambda row: (f"{row[f'{metric}_score']:.2f} Â± {row[f'{metric}_std']:.2f} "
                       f"({row[f'{metric}_median']:.2f})"),
            axis=1
        )
        display_df[f'{metric} Rank'] = df[f'{metric}_rank']
    
    return display_df


def extract_params_from_filename(file_path: Path) -> Dict[str, Optional[int]]:
    """
    Extract parameters from the filename.
    
    Args:
        file_path: Path to the CSV file
        
    Returns:
        Dictionary with extracted dilation and threshold parameters
    """
    filename = file_path.stem
    params = {'dilation': None, 'threshold': None}
    
    if filename.startswith("summary_dil_"):
        parts = filename.replace("summary_dil_", "").split("_thresh_")
        if len(parts) == 2:
            try:
                params['dilation'] = int(parts[0])
                params['threshold'] = int(parts[1])
            except ValueError:
                pass
    
    return params


def save_formatted_table(display_df: pd.DataFrame, output_path: Path, params: Dict[str, Optional[int]]) -> None:
    """
    Save formatted table as a text file.
    
    Args:
        display_df: Formatted display DataFrame
        output_path: Path to save the text file
        params: Dictionary with parameters for the header
    """
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write("BRATS-MET EVALUATION RESULTS SUMMARY\n")
        f.write(f"Parameters: Dilation={params['dilation']}, Threshold={params['threshold']}\n")
        f.write("=" * 120 + "\n")
        f.write(display_df.to_string(index=False))


def process_csv_file(file_path: Path, output_dir: Optional[Path] = None) -> pd.DataFrame:
    """
    Process a single CSV file and generate a formatted table.
    
    Args:
        file_path: Path to the CSV file
        output_dir: Optional directory to save the formatted table
        
    Returns:
        Formatted display DataFrame
    """
    print(f"Processing: {file_path}")
    
    # Load data
    df = load_summary_csv(file_path)
    
    # Format table
    display_df = format_display_table(df)
    
    # Extract parameters from filename
    params = extract_params_from_filename(file_path)
    
    # Save formatted table if output directory is provided
    if output_dir:
        output_dir.mkdir(parents=True, exist_ok=True)
        output_path = output_dir / f"{file_path.stem}.txt"
        save_formatted_table(display_df, output_path, params)
        print(f"Formatted table saved to: {output_path}")
    
    return display_df


def main():
    """Main function to process command-line arguments and execute the script."""
    parser = argparse.ArgumentParser(description="Generate formatted tables from BraTS-MET summary CSV files.")
    parser.add_argument("input", help="Path to a summary CSV file or a directory containing CSV files")
    parser.add_argument("--output", help="Directory to save formatted tables", default=None)
    
    args = parser.parse_args()
    
    input_path = Path(args.input)
    output_dir = Path(args.output) if args.output else None
    
    # Configure pandas display options
    pd.set_option('display.max_columns', None)
    pd.set_option('display.width', None)
    pd.set_option('display.max_colwidth', None)
    
    if input_path.is_dir():
        # Process all CSV files in the directory
        csv_files = list(input_path.glob("summary_*.csv"))
        if not csv_files:
            print(f"No summary CSV files found in: {input_path}")
            return
        
        for csv_file in csv_files:
            display_df = process_csv_file(csv_file, output_dir)
            
            # Display table
            print("\n" + "=" * 120)
            print(f"RESULTS FROM: {csv_file.name}")
            print("=" * 120)
            print(display_df.to_string(index=False))
            print("\n")
    else:
        # Process a single CSV file
        if not input_path.exists():
            print(f"File not found: {input_path}")
            return
        
        display_df = process_csv_file(input_path, output_dir)
        
        # Display table
        print("\n" + "=" * 120)
        print("BRATS-MET EVALUATION RESULTS SUMMARY")
        print("=" * 120)
        print(display_df.to_string(index=False))


if __name__ == "__main__":
    main()
